<?xml version="1.0" encoding="utf-8"?>
<mx:ApplicationControlBar xmlns:mx="http://www.adobe.com/2006/mxml"
						  width="720"
						  height="35"
						  verticalAlign="middle"
						  fillAlphas="[1,1]"
						  fillColors="[#f7f7f7, #dbdbdb]"
						  backgroundAlpha="1"
						  cornerRadius="3"
						  dropShadowEnabled="true"
						  shadowDistance="3"
						  dropShadowColor="#333333"
						  creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import org.jbpmside.view.component.role.ConnectionTool;
			import org.jbpmside.view.component.role.SelectionTool;
			import org.jbpmside.view.component.role.CreationTool;
			import org.jbpmside.view.component.gef.Tool;
			import org.jbpmside.event.CustomEvent;
			import org.jbpmside.dao.DaoFactory;
			import org.jbpmside.model.TheModel;

			[Bindable]
			public var model:TheModel=TheModel.getInstance();

			public var daoFactory:DaoFactory=DaoFactory.getInstance();

			[Bindable]
			[Embed(source="./assets/arrow.png")]
			private var arrowIcon:Class;

			[Bindable]
			[Embed(source="./assets/start.png")]
			private var startIcon:Class;

			[Bindable]
			[Embed(source="./assets/task.png")]
			private var taskIcon:Class;

			[Bindable]
			[Embed(source="./assets/fork.png")]
			private var forkIcon:Class;

			[Bindable]
			[Embed(source="./assets/join.png")]
			private var joinIcon:Class;

			[Bindable]
			[Embed(source="./assets/end.png")]
			private var endIcon:Class;

			[Bindable]
			[Embed(source="./assets/transition.png")]
			private var transitionIcon:Class;

			[Bindable]
			[Embed(source="./assets/print_zoom_in.png")]
			private var zoomInIcon:Class;

			[Bindable]
			[Embed(source="./assets/print_zoom_out.png")]
			private var zoomOutIcon:Class;

			[Bindable]
			[Embed(source="./assets/paste.png")]
			private var pasteIcon:Class;

			[Bindable]
			[Embed(source="./assets/copy.png")]
			private var copyIcon:Class;

			[Bindable]
			[Embed(source="./assets/cut.png")]
			private var cutIcon:Class;

			[Bindable]
			[Embed(source="./assets/delete.png")]
			private var deleteIcon:Class;

			private var createTool:Tool;
			private var selectTool:Tool;
			private var connectionTool:Tool;

			public function init():void
			{
				addListeners();
			}

			public function addListeners():void
			{
				model.addEventListener(TheModel.SELECTED_MODE_CHANGED, changeButtonStates);
			}


			private function changeButtonStates(event:Event):void
			{
				cleanSelectedState();
				var selectedMode:int=model.selectedMode;
				if (selectedMode == TheModel.SELECTED_NONE)
				{
					arrowButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_START_NODE)
				{
					startButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_TASK_NODE)
				{
					taskButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_FORK_NODE)
				{
					forkButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_JOIN_NODE)
				{
					joinButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_END_NODE)
				{
					endButton.styleName="buttonSelected";
				}
				else if (selectedMode == TheModel.SELECTED_TRANSITION)
				{
					transitionButton.styleName="buttonSelected";
				}
			}

			private var zoomList:Array=[.5, .75, 1, 1.5, 2];
			[Bindable]
			public var zoomPosition:Number=1;

			private function onZoomRatio():void
			{
				var ratio:Number=Math.max(zoomList[zoomPosition], .5);
				ratio=Math.min(ratio, 10);
				daoFactory.toolBarDAO.changeZoomRatio(ratio);
			}

			private function zoomIn():void
			{
				var _zoomRatio:Number=model.zoomRatio;
				var newPosition:int=0;
				var nPos:int=zoomList.length;
				for (var i:int=0; i < nPos; i++)
				{
					if (zoomList[i] <= _zoomRatio)
						newPosition=i;
				}
				zoomPosition=newPosition;

				if (zoomPosition < zoomList.length - 1)
				{
					zoomPosition++;

					onZoomRatio();
				}
			}

			private function zoomOut():void
			{
				var _zoomRatio:Number=model.zoomRatio;
				var newPosition:int=0;
				var nPos:int=zoomList.length;
				for (var i:int=0; i < nPos; i++)
				{
					if (zoomList[i] < _zoomRatio && i + 1 < nPos)
					{
						newPosition=i + 1;
					}
					else if (zoomList[i] == _zoomRatio)
					{
						newPosition=i;
						break;
					}
				}
				zoomPosition=newPosition;

				if (zoomPosition > 0)
				{
					zoomPosition--;

					onZoomRatio();
				}
			}

			private function clickArrow():void
			{
				daoFactory.toolBarDAO.changeSelectedMode(TheModel.SELECTED_NONE);
			}

			private function clickStart():void
			{
				clickNode(TheModel.SELECTED_START_NODE);
			}

			private function clickTask():void
			{
				clickNode(TheModel.SELECTED_TASK_NODE);
			}

			private function clickFork():void
			{
				clickNode(TheModel.SELECTED_FORK_NODE);
			}

			private function clickJoin():void
			{
				clickNode(TheModel.SELECTED_JOIN_NODE);
			}

			private function clickEnd():void
			{
				clickNode(TheModel.SELECTED_END_NODE);
			}
			
			private function clickNode(mode:int):void
			{
				daoFactory.toolBarDAO.changeSelectedMode(mode);
			}

			private function clickTransition():void
			{
				daoFactory.toolBarDAO.changeSelectedMode(TheModel.SELECTED_TRANSITION);
			}

			private function cleanSelectedState():void
			{
				arrowButton.styleName="buttonUnSelected";
				startButton.styleName="buttonUnSelected";
				taskButton.styleName="buttonUnSelected";
				forkButton.styleName="buttonUnSelected";
				joinButton.styleName="buttonUnSelected";
				endButton.styleName="buttonUnSelected";
				transitionButton.styleName="buttonUnSelected";
			}

			private function showGrid():void
			{
				daoFactory.toolBarDAO.showGrid(showGridCheckBox.selected);
			}

			private function snapGrid():void
			{
				model.alignToGrid=alignGridCheckBox.selected;
			}

			private function paste():void
			{
				model.dispatchEvent(new CustomEvent(TheModel.PASTE_EVENT));
			}

			private function copy():void
			{
				model.dispatchEvent(new CustomEvent(TheModel.COPY_EVENT));
			}

			private function cut():void
			{
				model.dispatchEvent(new CustomEvent(TheModel.CUT_EVENT));
			}

			private function deleteComponent():void
			{
				model.dispatchEvent(new CustomEvent(TheModel.DELETE_EVENT));
			}
		]]>
	</mx:Script>
	<mx:Style>
   		.buttonSelected{
   			fillAlphas: 1.0, 1.0;
			fillColors: #87CEFF, #87CEFF;
   		}
   		
   		.buttonUnSelected{
   			fillAlphas: 1.0, 1.0;
			fillColors: #FFFFFF, #FFFFFF;
   		}
   	</mx:Style>
	<mx:HBox horizontalGap="0">
		<mx:Button id="arrowButton"
				   width="32"
				   height="32"
				   styleName="buttonSelected"
				   icon="{arrowIcon}"
				   toolTip="Arrow"
				   click="clickArrow()"/>
		<mx:Button id="startButton"
				   width="32"
				   height="32"
				   icon="{startIcon}"
				   styleName="buttonUnSelected"
				   toolTip="StratNode"
				   click="clickStart()"/>
		<mx:Button id="taskButton"
				   width="32"
				   height="32"
				   icon="{taskIcon}"
				   styleName="buttonUnSelected"
				   toolTip="TaskNode"
				   click="clickTask()"/>
		<mx:Button id="forkButton"
				   width="32"
				   height="32"
				   icon="{forkIcon}"
				   styleName="buttonUnSelected"
				   toolTip="ForkNode"
				   click="clickFork()"/>
		<mx:Button id="joinButton"
				   width="32"
				   height="32"
				   icon="{joinIcon}"
				   styleName="buttonUnSelected"
				   toolTip="JoinNode"
				   click="clickJoin()"/>
		<mx:Button id="endButton"
				   width="32"
				   height="32"
				   icon="{endIcon}"
				   styleName="buttonUnSelected"
				   toolTip="EndNode"
				   click="clickEnd()"/>
		<mx:Button id="transitionButton"
				   width="32"
				   height="32"
				   icon="{transitionIcon}"
				   styleName="buttonUnSelected"
				   toolTip="Transition"
				   click="clickTransition()"/>
	</mx:HBox>
	<mx:VRule height="100%"
			  id="zoomSeparator"/>
	<mx:HBox horizontalGap="0"
			 id="zoomToolbar">
		<mx:Button width="32"
				   height="32"
				   icon="{zoomOutIcon}"
				   toolTip="Zoom Out"
				   click="zoomOut()"
				   id="zoomOutButton"/>
		<mx:Button icon="{zoomInIcon}"
				   toolTip="Zoom In"
				   click="zoomIn()"
				   height="32"
				   width="32"
				   id="zoomInButton"/>
		<mx:Label text="{Math.round(model.zoomRatio*100)+'%'}"
				  height="30"/>
	</mx:HBox>
	<mx:VRule height="100%"/>
	<mx:HBox horizontalGap="0"
			 id="editor">
		<mx:Button width="32"
				   height="32"
				   icon="{pasteIcon}"
				   enabled="{model.copyOrCutComponent!=null}"
				   toolTip="Paste"
				   click="paste()"
				   id="pasteButton"/>
		<mx:Button icon="{copyIcon}"
				   toolTip="Copy"
				   click="copy()"
				   height="32"
				   width="32"
				   id="copyButton"/>
		<mx:Button icon="{cutIcon}"
				   toolTip="Cut"
				   click="cut()"
				   height="32"
				   width="32"
				   id="cutButton"/>
		<mx:Button icon="{deleteIcon}"
				   toolTip="Delete"
				   click="deleteComponent()"
				   height="32"
				   width="32"
				   id="deleteButton"/>
	</mx:HBox>
	<mx:VRule height="100%"/>
	<mx:HBox horizontalGap="0"
			 id="showHide">
		<mx:CheckBox id="showGridCheckBox"
					 label="Show Grid"
					 color="#000000"
					 selected="{model.showGrid}"
					 change="showGrid()"/>
		<mx:CheckBox id="alignGridCheckBox"
					 label="Align to Grid"
					 color="#000000"
					 selected="{model.alignToGrid}"
					 change="snapGrid()"/>
	</mx:HBox>
</mx:ApplicationControlBar>
